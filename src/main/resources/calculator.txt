imports: {{
    import java.lang.Long;
    import java.lang.Math;
}}

tokens: {{
    'LP': "(";
    'RP': ")";
    'POW': "**";
    'MULTIPLY': "*";
    'DIVISION': "/";
    'PLUS': "+";
    'MINUS': "-";
    'VAR': regex "[0-9]+";
}}

rules: {{
    atom: {{ Long }} = {{
        'LP' <value:expr> 'RP' => {{ value }};
        <n:'VAR'> => {{ Long.parseLong(n) }};
    }}

    pow_cont: {{ Long }} = {{
        => {{ 1 }};
        'POW' <expr:atom> <cont:pow_cont> => {{ Math.round(Math.pow(expr, cont)) }};
    }}

    pow: {{ Long }} = {{
        <expr:atom> <cont:pow_cont> => {{ Math.round(Math.pow(expr, cont)) }};
    }}

    prod_cont: {{ acc:Long }} -> {{ Long }} = {{
        => {{ acc }};
        'MULTIPLY' <expr:pow> <cont:prod_cont{{ {{ acc * expr }}; }}> => {{ cont }};
        'DIVISION' <expr:pow> <cont:prod_cont{{ {{ acc / expr }}; }}> => {{ cont }};
    }}

    prod: {{ Long }} = {{
        <expr:pow> <cont:prod_cont{{ {{ expr }}; }}> => {{ cont }};
    }}

    expr_cont: {{ acc: Long }} -> {{ Long }} = {{
        => {{ acc }};
        'PLUS' <expr:prod> <cont:expr_cont{{ {{ acc + expr }}; }}> => {{ cont }};
        'MINUS' <expr:prod> <cont:expr_cont{{ {{ acc - expr }}; }}> => {{ cont }};
    }}

    expr: {{ Long }} = {{
        <expr:prod> <cont:expr_cont{{ {{ expr }}; }}> => {{ cont }};
    }}
}}